stages {
  stage('Set Environment Variables') {
    steps {
      script {
        echo "JOB_NAME = ${JOB_NAME}"
        echo "BUILD_NUMBER = ${BUILD_NUMBER}"
        echo "BUILD_URL = ${BUILD_URL}"
        echo "GIT_URL = ${GIT_URL}"
        echo "BRANCH_NAME = ${BRANCH_NAME}"

        switch(BRANCH_NAME) {
          case "master":
          case "master_k8s":
            env.DOCKER_TAG = "prod"
            env.PROJECT_ID = 'sirius-mep'
            env.CLUSTER_NAME = 'in-scope-core'
            break
          case "staging":
          case "staging_k8s":
            env.DOCKER_TAG = "stg"
            env.PROJECT_ID = 'sirius-mep-dev'
            env.CLUSTER_NAME = 'in-scope-core'
            break
          default:
            env.DOCKER_TAG = "dev"
            env.PROJECT_ID = 'sirius-mep-dev'
            env.CLUSTER_NAME = 'in-scope-core'
            break
        }
        env.NAMESPACE = "fonyou"
        env.DOCKER_IMAGE_NAME = "sirius-pci-gw-manager"
        env.DOCKER_REGISTRY = "us.gcr.io/${PROJECT_ID}"

        //Print environment variables
        echo "DOCKER_TAG = ${DOCKER_TAG}"
        echo "PROJECT_ID = ${PROJECT_ID}"
        echo "CLUSTER_NAME = ${CLUSTER_NAME}"
        echo "NAMESPACE = ${NAMESPACE}"
        echo "DOCKER_REGISTRY = ${DOCKER_REGISTRY}"
        echo "DOCKER_IMAGE_NAME = ${DOCKER_IMAGE_NAME}"
      }
    }
  }
  stage('Build') {
    steps {
      sh("mvn spring-boot:build-image")
    }
  }
  stage('Test') {
    steps {
      sh("mvn test")
    }
  }
  stage('SonarQube Analysis') {
    when {
      not {
        branch 'master_k8s'
      }
    }
    steps {
      withSonarQubeEnv('SonarQube') {
        sh("mvn verify sonar:sonar")
      }
    }
  }
  stage("Quality Gate") {
    when {
      not {
        branch 'master_k8s'
      }
    }
    steps {
      script {
        timeout(time: 15, unit: 'MINUTES') {
          def qg = waitForQualityGate()
          if (qg.status == 'ERROR') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
          }
          echo "Pipeline quality gate: ${qg.status}"
        }
      }
    }
  }
  stage("Build Docker Image") {
    when {
      anyOf {
        branch 'master_k8s'
        branch 'master'
        branch 'staging_k8s'
        branch 'staging'
        branch 'develop_k8s'
        branch 'develop'
      }
    }
    steps {
      sh ("docker-credential-gcr configure-docker")
      echo "DOCKER_TAG = ${DOCKER_TAG}"
      sh("docker build --build-arg JAR_PATH=\"`ls ./target/*.jar | grep -v sources | grep -v original`\" -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}-${BUILD_NUMBER} .")
      sh("docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}-${BUILD_NUMBER}")
    }
  }
  stage("Scan Vulnerabilities") {
    when {
      anyOf {
        branch 'master'
        branch 'staging_k8s'
        branch 'staging'
        branch 'develop_k8s'
        branch 'develop'
      }
    }
    steps {
      sh("echo \"${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}-${BUILD_NUMBER} `pwd`/Dockerfile\" > anchore_images")
      anchore engineRetries: '600', name: 'anchore_images'
    }
  }
  stage('JFrog Deploy') {
    when {
      not {
        anyOf {
          branch 'master_k8s'
          branch 'staging_k8s'
          branch 'develop_k8s'
        }
      }
    }
    steps {
      sh("mvn deploy -DskipTests")
    }
  }
  stage("K8s Deploy") {
    when {
      anyOf {
        branch 'master_k8s'
        branch 'staging_k8s'
        branch 'develop_k8s'
      }
    }
    steps {
      script {
        sh ("docker-credential-gcr configure-docker")
        // set production image label
        sh("docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}-${BUILD_NUMBER} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}")
        sh("docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}")

        // Change context
        sh("kubectl config use-context gke_${PROJECT_ID}_us-central1-a_${CLUSTER_NAME}")

        // change image
        sh("")
        sh ("kubectl set image --record deployment/${DOCKER_IMAGE_NAME} ${DOCKER_IMAGE_NAME}=${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}-${BUILD_NUMBER} --namespace ${NAMESPACE}")
    }
  }
}
}
